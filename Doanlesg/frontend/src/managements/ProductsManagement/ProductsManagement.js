import React, { useState, useEffect, useRef } from 'react';
import './ProductsManagement.css';
import { FaEdit, FaTrashAlt } from 'react-icons/fa';
import { CiSearch } from 'react-icons/ci';
import { useNavigate } from 'react-router-dom';
import {useAuth} from "../../contexts/AuthContext";
import {useNotification} from "../../contexts/NotificationContext";

const hasRole = (user, role) => {
  if (!user.roles || !user) return false;
  if (Array.isArray(user.roles)) {
    return user.roles.includes(role);
  }
  return user.roles === role;
};

export default function ProductsManagement() {
  const { user, isLoading } = useAuth();
  const { addNotification } = useNotification();

  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [allCategories, setAllCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [showFilter, setShowFilter] = useState(false);

  const navigate = useNavigate();
  const filterRef = useRef(null);

  useEffect(() => {
    if (!isLoading) {
      if (!user || (!hasRole(user, 'ROLE_ADMIN') && !hasRole(user, 'ROLE_STAFF')) ) {
        addNotification('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y.', 'error');
        navigate('/login');
      }
    }
  }, [user, isLoading, navigate, addNotification]);

  // G·ªçi API l·∫•y to√†n b·ªô s·∫£n ph·∫©m
  const fetchAllProducts = async () => {
    try {
      const res = await fetch('http://localhost:8080/api/ver0.0.1/product?page=0&size=100&sort=id');
      const data = await res.json();
      console.log('T·∫•t c·∫£ s·∫£n ph·∫©m:', data.content);
      setProducts(data.content || []);
    } catch (err) {
      console.error('L·ªói khi g·ªçi API allProducts:', err);
    }
  };

  // G·ªçi API t√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n
  const fetchByKeyword = async (keyword) => {
    try {
      const res = await fetch(`http://localhost:8080/api/ver0.0.1/product/productname?keyword=${searchKeyword}&page=0&size=100&sort=productName`)
      const data = await res.json();
      console.log('K·∫øt qu·∫£ t√¨m ki·∫øm:', data.content);
      setProducts(data.content || []);
    } catch (err) {
      console.error('L·ªói khi g·ªçi API t√¨m ki·∫øm:', err);
    }
  };

  // Thay ƒë·ªïi t·ª´ kh√≥a ‚Üí g·ªçi API ho·∫∑c load to√†n b·ªô
  useEffect(() => {
    if (searchKeyword.trim()) {
      fetchByKeyword(searchKeyword);
    } else {
      fetchAllProducts();
    }
  }, [searchKeyword]);

  // L·∫•y danh m·ª•c s·∫£n ph·∫©m t·ª´ d·ªØ li·ªáu
  useEffect(() => {
    const uniqueCategories = [...new Set(products.map(p => p.category?.categoryName || ''))];
    console.log('Danh s√°ch danh m·ª•c:', uniqueCategories);
    setAllCategories(uniqueCategories);
    setSelectedCategories(prev =>
      prev.length === 0 ? uniqueCategories : prev.filter(c => uniqueCategories.includes(c))
    );
  }, [products]);

  // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c & t·ª´ kh√≥a
  useEffect(() => {
    const keyword = searchKeyword.toLowerCase();
    const result = products.filter(p =>
      selectedCategories.includes(p.category?.categoryName) &&
      p.productName?.toLowerCase().includes(keyword)
    );
    console.log('S·∫£n ph·∫©m hi·ªÉn th·ªã sau khi l·ªçc:', result);
    setFilteredProducts(result);
  }, [products, selectedCategories, searchKeyword]);

  // T·ª± ƒë√≥ng popup filter khi click ra ngo√†i
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (filterRef.current && !filterRef.current.contains(e.target)) {
        setShowFilter(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // H√†nh ƒë·ªông
    const handleDelete = async (id) => {
      if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh√¥ng?")) return;
        try {
        const response = await fetch(`http://localhost:8080/staff/products/${id}`, {
          method: "DELETE",
          credentials: "include", // c·∫ßn thi·∫øt ƒë·ªÉ g·ª≠i session cookie
        });
        if (response.ok) {
          alert("S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a");
          // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m sau khi x√≥a
          setProducts(prev => prev.filter(p => p.id !== id));
        } else if (response.status === 403) {
          alert("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m.");
        } else if (response.status === 404) {
          alert("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.");
        } else {
          const text = await response.text();
          console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", text);
          alert(`L·ªói khi x√≥a s·∫£n ph·∫©m: ${text}`);
        }
      } catch (error) {
        console.error("L·ªói k·∫øt n·ªëi:", error);
        alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
      }
    };

  const handleCreate = () => navigate('/admin/create');
  const handleEdit = (id) => navigate(`/admin/edit/${id}`);

  const handleCategoryChange = (cat) =>
    setSelectedCategories(prev =>
      prev.includes(cat) ? prev.filter(c => c !== cat) : [...prev, cat]
    );

  const handleSelectAll = () => setSelectedCategories(allCategories);

  const handleExportCSV = () => {
    const headers = ['M√£', 'T√™n s·∫£n ph·∫©m', 'Danh m·ª•c', 'ƒê∆°n gi√°', 'S·ªë l∆∞·ª£ng', 'Tr·∫°ng th√°i'];
    const rows = filteredProducts.map(p => [
      p.id,
      p.productName,
      p.category?.categoryName,
      p.price,
      p.stockQuantity,
      p.stockQuantity === 0 ? 'H·∫øt h√†ng' : 'C√≤n h√†ng'
    ]);

    const csvContent = [headers, ...rows]
      .map(row => row.map(value => `"${value}"`).join(','))
      .join('\n');

    const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'danh_sach_san_pham.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="products-management">
      <h2>Danh S√°ch S·∫£n Ph·∫©m</h2>

      <div className="admin-controls">
        <button className="btn green" onClick={handleCreate}>CREATE</button>

        <div className="filter-container" ref={filterRef}>
          <button className="btn pink" onClick={() => setShowFilter(prev => !prev)}>FILTER</button>
          <div className={`filter-popup ${showFilter ? 'show' : ''}`}>
            <div className="filter-commands">
              <span className="link" onClick={handleSelectAll}>Select All</span>
            </div>
            <div className="filter-options">
              {allCategories.map((cat, idx) => (
                <label key={idx} className="filter-option-item">
                  <input
                    type="checkbox"
                    checked={selectedCategories.includes(cat)}
                    onChange={() => handleCategoryChange(cat)}
                  />
                  <span className="filter-label">{cat}</span>
                </label>
              ))}
              {allCategories.length === 0 && (
                <div className="no-category">Kh√¥ng c√≥ danh m·ª•c n√†o.</div>
              )}
            </div>
          </div>
        </div>

        <button className="btn yellow" onClick={handleExportCSV}>EXPORT</button>

        <div className="search-bar">
          <input
            type="text"
            placeholder="T√¨m s·∫£n ph·∫©m..."
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
          />
          <button><CiSearch size={20} /></button>
        </div>
      </div>

      <div className="table-wrapper">
        <table className="admin-product-table">
          <thead>
            <tr>
              <th>M√£</th>
              <th>T√™n s·∫£n ph·∫©m</th>
              <th>Danh m·ª•c</th>
              <th>ƒê∆°n gi√°</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>H√¨nh ·∫£nh</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.map(p => (
              <tr key={p.id}>
                <td>{p.id}</td>
                <td>{p.productName}</td>
                <td>{p.category?.categoryName}</td>
                <td>{p.price}</td>
                <td>{p.stockQuantity}</td>
                <td>
                  {p.image
                    ? <img src={p.image} alt={p.productName} className="product-image" />
                    : <span className="no-image">üö´</span>}
                </td>
                <td className={p.stockQuantity === 0 ? 'status out' : 'status in'}>
                  {p.stockQuantity === 0 ? 'H·∫øt h√†ng' : 'C√≤n h√†ng'}
                </td>
                <td>
                  <FaEdit className="icon edit" onClick={() => handleEdit(p.id)} />
                  <FaTrashAlt className="icon delete" onClick={() => handleDelete(p.id)} />
                </td>
              </tr>
            ))}
            {filteredProducts.length === 0 && (
              <tr>
                <td colSpan="8" style={{ textAlign: 'center' }}>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}