import React, { useState, useEffect, useRef } from 'react';
import './ProductsManagement.css';
import { FaEdit, FaTrashAlt } from 'react-icons/fa';
import { CiSearch } from 'react-icons/ci';
import { useNavigate } from 'react-router-dom';

// ‚úÖ D·ªØ li·ªáu m·∫´u (ch∆∞a k·∫øt n·ªëi API)
const initialProductData = [
  {
    id: 1,
    code: '389033',
    name: 'M√¢m C√∫ng T·∫øt ƒêoan Ng·ªç',
    category: 'M√¢m l·ªÖ',
    price: '1.392.000',
    quantity: 50,
    status: 'C√≤n h√†ng',
    image: '/images/BoQuaBonMua.png' // ‚úÖ ƒë∆∞·ªùng d·∫´n ·∫£nh
  },
  {
    id: 7,
    code: '389033',
    name: 'M√¢m C√∫ng T·∫øt ƒêoan Ng·ªç',
    category: 'Th√°p l·ªÖ tr√°i c√¢y',
    price: '1.392.000',
    quantity: 50,
    status: 'C√≤n h√†ng',
    image: '/images/AnNhienPhuQuy.png'
  },
  {
    id: 2,
    code: '389034',
    name: 'M√¢m C√∫ng Trung Thu',
    category: 'M√¢m l·ªÖ',
    price: '1.500.000',
    quantity: 0,
    status: 'H·∫øt h√†ng',
    image: '/images/Xoingusac.png'
  },
  {
    id: 3,
    code: '389035',
    name: 'M√¢m C√∫ng Giao Th·ª´a',
    category: 'Th√°p tr√°i c√¢y',
    price: '1.800.000',
    quantity: 30,
    status: 'C√≤n h√†ng',
    image: '/images/ChieuTaiDonLoc.png'
  }
];

const ProductsManagement = () => {
  const [products, setProducts] = useState(initialProductData);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [allCategories, setAllCategories] = useState([]);
  const [selectedCategories, setSelectedCategories] = useState([]);
  const [showFilter, setShowFilter] = useState(false);

  const navigate = useNavigate();
  const filterRef = useRef(null);

  // ‚úÖ C·∫≠p nh·∫≠t danh m·ª•c v√† gi·ªØ l·∫°i nh·ªØng danh m·ª•c ƒëang c√≤n
  useEffect(() => {
    const uniqueCategories = [...new Set(products.map(p => p.category))];
    setAllCategories(uniqueCategories);
    setSelectedCategories(prev =>
      prev.length === 0 ? uniqueCategories : prev.filter(c => uniqueCategories.includes(c))
    );
  }, [products]);

  // ‚úÖ L·ªçc s·∫£n ph·∫©m theo danh m·ª•c & t√™n
  useEffect(() => {
    const result = products.filter(
      (p) =>
        selectedCategories.includes(p.category) &&
        p.name.toLowerCase().includes(searchKeyword.toLowerCase())
    );
    setFilteredProducts(result);
  }, [products, selectedCategories, searchKeyword]);

  // ‚úÖ T·ª± ƒë√≥ng popup filter n·∫øu click ra ngo√†i
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (filterRef.current && !filterRef.current.contains(e.target)) {
        setShowFilter(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // ‚úÖ X·ª≠ l√Ω x√≥a s·∫£n ph·∫©m
  const handleDelete = (id) => {
    const updated = products.filter(p => p.id !== id);
    setProducts(updated);
  };

  // ‚úÖ Chuy·ªÉn sang trang t·∫°o s·∫£n ph·∫©m
  const handleCreate = () => {
    navigate('/admin/create');
  };

  // ‚úÖ Chuy·ªÉn sang trang ch·ªânh s·ª≠a s·∫£n ph·∫©m
  const handleEdit = (id) => {
    navigate(`/admin/edit/${id}`);
  };

  // ‚úÖ Thay ƒë·ªïi danh m·ª•c ƒë∆∞·ª£c ch·ªçn
  const handleCategoryChange = (category) => {
    setSelectedCategories(prev =>
      prev.includes(category)
        ? prev.filter(c => c !== category)
        : [...prev, category]
    );
  };

  // ‚úÖ Ch·ªçn t·∫•t c·∫£ danh m·ª•c
  const handleSelectAll = () => {
    setSelectedCategories(allCategories);
  };

  // ‚úÖ ƒê·∫£o ng∆∞·ª£c l·ª±a ch·ªçn
  const handleInvert = () => {
    const inverted = allCategories.filter(c => !selectedCategories.includes(c));
    setSelectedCategories(inverted);
  };

  // ‚úÖ Export CSV v√† t·∫£i v·ªÅ m√°y
  const handleExportCSV = () => {
    const headers = ['M√£', 'T√™n s·∫£n ph·∫©m', 'Danh m·ª•c', 'ƒê∆°n gi√°', 'S·ªë l∆∞·ª£ng', 'Tr·∫°ng th√°i'];
    const rows = filteredProducts.map(p => [
      p.code, p.name, p.category, p.price, p.quantity, p.status
    ]);

    const csvContent = [headers, ...rows]
      .map(row => row.map(value => `"${value}"`).join(','))
      .join('\n');

    const blob = new Blob(["\uFEFF" + csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'danh_sach_san_pham.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="products-management">
      <h2>Danh S√°ch S·∫£n Ph·∫©m</h2>

      {/* ‚úÖ Thanh c√¥ng c·ª• */}
      <div className="admin-controls">
        <button className="btn green" onClick={handleCreate}>CREATE</button>

        {/* ‚úÖ B·ªô l·ªçc danh m·ª•c */}
        <div className="filter-container" ref={filterRef}>
          <button className="btn pink" onClick={() => setShowFilter(prev => !prev)}>FILTER</button>
          <div className={`filter-popup ${showFilter ? 'show' : ''}`}>
            <div className="filter-commands">
              <span className="link" onClick={handleSelectAll}>Select All</span>
              <span className="link" onClick={handleInvert}>Invert</span>
            </div>
            <div className="filter-options">
              {allCategories.map((cat, idx) => (
                <label key={idx} className="filter-option-item">
                  <input
                    type="checkbox"
                    className="filter-checkbox"
                    checked={selectedCategories.includes(cat)}
                    onChange={() => handleCategoryChange(cat)}
                  />
                  <span className="filter-label">{cat}</span>
                </label>
              ))}
              {allCategories.length === 0 && (
                <div className="no-category">Kh√¥ng c√≥ danh m·ª•c n√†o.</div>
              )}
            </div>
          </div>
        </div>

        <button className="btn yellow" onClick={handleExportCSV}>EXPORT</button>

        {/* ‚úÖ T√¨m ki·∫øm theo t√™n */}
        <div className="search-bar">
          <input
            type="text"
            placeholder="T√¨m s·∫£n ph·∫©m..."
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
          />
          <button><CiSearch size={20} /></button>
        </div>
      </div>

      {/* ‚úÖ B·∫£ng hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m */}
      <div className="table-wrapper">
        <table className="admin-product-table">
          <thead>
            <tr>
              <th><input type="checkbox" /></th>
              <th>M√£</th>
              <th>T√™n s·∫£n ph·∫©m</th>
              <th>Danh m·ª•c</th>
              <th>ƒê∆°n gi√°</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>H√¨nh ·∫£nh</th>
              <th>Tr·∫°ng th√°i</th>
              <th>H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {filteredProducts.map((product) => (
              <tr key={product.id}>
                <td><input type="checkbox" /></td>
                <td>{product.code}</td>
                <td>{product.name}</td>
                <td>{product.category}</td>
                <td>{product.price}</td>
                <td>{product.quantity}</td>
                <td>
                  {product.image ? (
                    <img src={product.image} alt={product.name} className="product-image" />
                  ) : (
                    <span className="no-image">üö´</span>
                  )}
                </td>
                <td className={product.status === 'H·∫øt h√†ng' ? 'status out' : 'status in'}>
                  {product.status}
                </td>
                <td>
                  <FaEdit
                    className="icon edit"
                    title="Ch·ªânh s·ª≠a"
                    onClick={() => handleEdit(product.id)}
                  />
                  <FaTrashAlt
                    className="icon delete"
                    title="X√≥a"
                    onClick={() => handleDelete(product.id)}
                  />
                </td>
              </tr>
            ))}
            {filteredProducts.length === 0 && (
              <tr>
                <td colSpan="9" style={{ textAlign: 'center', padding: '20px' }}>
                  Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ph√π h·ª£p.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ProductsManagement;
