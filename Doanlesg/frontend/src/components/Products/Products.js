import React, { useEffect, useState } from 'react';
import { Link, useParams } from 'react-router-dom';
import { FaHeart } from 'react-icons/fa';
import './Products.css';
import AddToCartButton from "../AddToCart/AddToCartButton";


const ProductsPage = () => {
  const { categorySlug } = useParams();
  const [products, setProducts] = useState([]);
  const [sortOption, setSortOption] = useState('default');
  const [selectedSubCategory, setSelectedSubCategory] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 20;



  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await fetch("http://localhost:8080/api/ver0.0.1/product?page=0&size=100&sort=productName");
        const data = await res.json();
        setProducts(data.content || []);
      } catch (err) {
        console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', err);
      }
    };
    fetchProducts();
  }, []);

  const toggleFavorite = (id) => {
    setProducts(prev =>
      prev.map(item =>
        item.id === id ? { ...item, isFavorite: !item.isFavorite } : item
      )
    );
  };

  const addToCart = (item) => {
    alert(`ƒê√£ th√™m "${item.productName}" v√†o gi·ªè h√†ng!`);
  };

  // L·∫•y t√™n danh m·ª•c con t·ª´ productName
  const getSubCategoryName = (product) => {
    const name = product.productName?.toLowerCase() || '';
    if (name.includes('qu·∫£') || name.includes('tr√°i c√¢y')) return 'M√¢m Hoa Qu·∫£';
    if (name.includes('c√∫ng') || name.includes('t·ªï ti√™n') || name.includes('th·∫ßn t√†i')) return 'M√¢m C√∫ng L·ªÖ';
    if (name.includes('qu√†') || name.includes('vip') || name.includes('t·∫∑ng')) return 'Qu√† T·∫∑ng Cao C·∫•p';
    if (name.includes('b√°nh') || name.includes('ng·ªçt') || name.includes('o·∫£n')) return 'M√¢m B√°nh';
    if (name.includes('chay') || name.includes('m·∫∑n')) return 'M√¢m Chay, M·∫∑n';
    return 'Kh√°c';
  };

  const subCategories = [...new Set(products.map(getSubCategoryName))];

  const filtered = selectedSubCategory
    ? products.filter((p) => getSubCategoryName(p) === selectedSubCategory)
    : products;

  const sorted = [...filtered].sort((a, b) => {
    switch (sortOption) {
      case 'price-asc':
        return a.price - b.price;
      case 'price-desc':
        return b.price - a.price;
      case 'name-asc':
        return a.productName.localeCompare(b.productName);
      case 'name-desc':
        return b.productName.localeCompare(a.productName);
      default:
        return 0;
    }
  });
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = sorted.slice(indexOfFirstItem, indexOfLastItem);
  return (
    <div className="products-wrapper">
      {/* Banner khi kh√¥ng c√≥ danh m·ª•c */}
      {!categorySlug && (
        <>
          <div className="products-banner">
            <h2 className="brand-name">DoleSaigon</h2>
            <p className="products-description">
              <strong>üå∏ G·ª≠i tr·ªçn t√¨nh th√¢n, trao ch·ªçn nghƒ©a l·ªÖ üå∏</strong><br />
              T·∫°i DoleSaigon, m·ªói m√≥n qu√† kh√¥ng ch·ªâ l√† s·∫£n ph·∫©m, m√† l√† l·ªùi ch√∫c l√†nh ‚Äì s·ª± g·∫Øn k·∫øt thi√™ng li√™ng gi·ªØa c√°c th·∫ø h·ªá.<br />
              Ch√∫ng t√¥i mang ƒë·∫øn nh·ªØng <em>m√¢m l·ªÖ t∆∞∆°m t·∫•t</em>, <em>qu√† bi·∫øu tinh t·∫ø</em> ‚Äì k·∫øt h·ª£p h√†i h√≤a gi·ªØa gi√° tr·ªã truy·ªÅn th·ªëng v√† chu·∫©n m·ª±c hi·ªán ƒë·∫°i.<br />
              H∆°n c·∫£ m·ªôt th∆∞∆°ng hi·ªáu, DoleSaigon l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trong m·ªçi kho·∫£nh kh·∫Øc sum v·∫ßy.
            </p>
          </div>
          <h2 className="products-title">T·∫•t c·∫£ s·∫£n ph·∫©m</h2>
        </>
      )}

      {/* Tabs danh m·ª•c con */}
      <div className="tabs">
        {subCategories.map(cat => (
          <button
            key={cat}
            className={cat === selectedSubCategory ? 'active' : ''}
            onClick={() => setSelectedSubCategory(cat)}
          >
            <span className="inner-border">{cat}</span>
          </button>
        ))}
      </div>

      {/* S·∫Øp x·∫øp */}
<div className="sort-options">
  <span className="sort-label">X·∫øp theo</span>
  {[
    { value: "default", label: "M·∫∑c ƒë·ªãnh" },
    { value: "name-asc", label: "T√™n A-Z" },
    { value: "name-desc", label: "T√™n Z-A" },
    { value: "newest", label: "H√†ng m·ªõi" },
    { value: "price-asc", label: "Gi√° th·∫•p ƒë·∫øn cao" },
    { value: "price-desc", label: "Gi√° cao xu·ªëng th·∫•p" },
  ].map((option) => (
    <button
      key={option.value}
      onClick={() => setSortOption(option.value)}
      className={`sort-button ${sortOption === option.value ? 'active' : ''}`}
    >
      <span className="diamond">‚óÜ</span>
      {option.label}
    </button>
  ))}
</div>

               {/* Danh s√°ch s·∫£n ph·∫©m */}
             {sorted.length === 0 ? (
               <p className="no-products">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.</p>
             ) : (
               <div className="product-grid">
                 {currentItems.map(item => (
                   <div key={item.id} className="promo-item-products">
                     <Link to={`/product/${item.id}`}>
                       <img src={`/products/${item.id}.png`} alt={item.productName} />
                       <span className="discount-tag">-{Math.round(10)}%</span>

                     </Link>

                     {/* N·∫±m ngo√†i Link nh∆∞ng v·∫´n n·∫±m trong promo-item */}
                     <div className="price-box-products">
                          <h4>{item.productName}</h4>
                          <span className="old-price-products">{(item.price * 1.1).toLocaleString()}ƒë</span>
                          <span className="new-price-products">{item.price.toLocaleString()}ƒë</span>
                          <div className="action-buttons">
                               <AddToCartButton product={item} quantity={1} />
                               <button
                                 className="heart-btn"
                                 onClick={() => toggleFavorite(item.id)}
                                 title="Y√™u th√≠ch"
                               >
                                 <FaHeart className={`heart-icon ${item.isFavorite ? 'red' : ''}`} />
                               </button>
                             </div>
                        </div>


                   </div>

                 ))}
               </div>
             )}
             <div className="pagination">
               {Array.from({ length: Math.ceil(sorted.length / itemsPerPage) }, (_, i) => (
                 <button
                   key={i + 1}
                   onClick={() => setCurrentPage(i + 1)}
                   className={currentPage === i + 1 ? 'active' : ''}
                 >
                   {i + 1}
                 </button>
               ))}
             </div>

    </div>
  );
};

export default ProductsPage;
