import React, { useEffect, useState } from 'react';
import { Link, useParams, useLocation, useNavigate } from 'react-router-dom';
import { FaHeart } from 'react-icons/fa';
import './Products.css';
import AddToCartButton from "../AddToCart/AddToCartButton";
import { toggleFavoriteItem, isItemFavorite } from '../LikeButton/LikeButton';
import ProductImage from '../common/ProductImage';
import {
  CategoryData,
  subCategoryMap,
  getSubCategoryName,
} from "../../data/CategoryData";

const ProductsPage = () => {

  const { categorySlug } = useParams();         // null if at /products
  const location = useLocation();               // used to get query ?sub=...
  const navigate = useNavigate();

  // Get subcategory from URL query
  // L·∫•y subcategory t·ª´ URL query
  const searchParams = new URLSearchParams(location.search);
  const keyword = searchParams.get("keyword") || "";
  const selectedSub = searchParams.get("sub") || "";

  const [products, setProducts] = useState([]);
  const [sortOption, setSortOption] = useState('default');
  const [selectedCategory, setSelectedCategory] = useState(''); // only used for /products
  const [currentPage, setCurrentPage] = useState(1);

  const itemsPerPage = 20;
  const isAllPage = !categorySlug;
  const currentSlug = isAllPage
      ? CategoryData?.find((c) => c.name === selectedCategory)?.slug
      : categorySlug;

  /* ----------------- FETCH ----------------- */
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        let url = "";
        if (keyword.trim()) {
          url = `http://localhost:8080/api/ver0.0.1/product/productname?keyword=${encodeURIComponent(keyword)}&page=0&size=100&sort=productName`;
        } else {
          url = `http://localhost:8080/api/ver0.0.1/product?page=0&size=100&sort=productName`;
        }
        const res = await fetch(url);
        const data = await res.json();
        // Add a 'lastUpdated' timestamp to each product for cache-busting
        const productsWithCacheKey = (data.content || []).map(p => ({
          ...p,
          lastUpdated: Date.now()
        }));
        setProducts(productsWithCacheKey);
      } catch (err) {
        console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', err);
      }
    };
    fetchProducts().then();
  }, [keyword]);

  // Reset page when slug changes
  useEffect(() => {
    setCurrentPage(1);
  }, [categorySlug, selectedSub]);

  // Fallback subcategory function if CategoryData is not available
  const getSubCategoryNameFallback = (product) => {
    const name = product.productName?.toLowerCase() || '';
    if (name.includes('qu·∫£') || name.includes('tr√°i c√¢y')) return 'M√¢m Hoa Qu·∫£';
    if (name.includes('c√∫ng') || name.includes('t·ªï ti√™n') || name.includes('th·∫ßn t√†i')) return 'M√¢m C√∫ng L·ªÖ';
    if (name.includes('qu√†') || name.includes('vip') || name.includes('t·∫∑ng')) return 'Qu√† T·∫∑ng Cao C·∫•p';
    if (name.includes('b√°nh') || name.includes('ng·ªçt') || name.includes('o·∫£n')) return 'M√¢m B√°nh';
    if (name.includes('chay') || name.includes('m·∫∑n')) return 'M√¢m Chay, M·∫∑n';
    return 'Kh√°c';
  };

  const mainCategories = CategoryData ? CategoryData.map((c) => c.name) : [];

  /* ----------------- FILTER ----------------- */
  let filtered = products;

  if (currentSlug && CategoryData) {
    // Use CategoryData filtering when available
    filtered = products.filter((p) => {
      const sub = getSubCategoryName(p, currentSlug);
      if (!subCategoryMap[currentSlug]?.includes(sub)) return false;

      // If there's a selected sub in query ?sub=
      if (selectedSub) return sub === selectedSub;

      return true;
    });
  } else if (selectedCategory && !CategoryData) {
    // Fallback filtering for when CategoryData is not available
    filtered = products.filter((p) => {
      const sub = getSubCategoryNameFallback(p);
      return sub !== 'Kh√°c'; // Filter out 'Kh√°c' category
    });
  }

  // Get subcategories for tabs
  const subCategories = CategoryData && currentSlug && subCategoryMap[currentSlug]
      ? subCategoryMap[currentSlug]
      : [...new Set(products.map(getSubCategoryNameFallback))];

  /* ----------------- SORT ----------------- */
  const sorted = [...filtered].sort((a, b) => {
    switch (sortOption) {
      case 'price-asc':
        return a.price - b.price;
      case 'price-desc':
        return b.price - a.price;
      case 'name-asc':
        return a.productName.localeCompare(b.productName);
      case 'name-desc':
        return b.productName.localeCompare(a.productName);
      default:
        return 0;
    }
  });

  /* ----------------- PAGINATION ----------------- */
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = sorted
      .slice(indexOfFirstItem, indexOfLastItem)
      .map(item => ({
        ...item,
        isFavorite: isItemFavorite(item.id),
      }));

  const toggleFavorite = (item) => {
    toggleFavoriteItem(item);
    setProducts(prev =>
        prev.map(p =>
            p.id === item.id ? { ...p, isFavorite: !p.isFavorite } : p
        )
    );
  };

  /* ----------------- RENDER ----------------- */
  return (
      <div className="products-wrapper">
        {/* Banner when no category is selected */}
        {isAllPage && (
            <>
              <div className="products-banner">
                <h2 className="brand-name">DoleSaigon</h2>
                <p className="products-description">
                  <strong>üå∏ G·ª≠i tr·ªçn t√¨nh th√¢n, trao ch·ªçn nghƒ©a l·ªÖ üå∏</strong><br />
                  T·∫°i DoleSaigon, m·ªói m√≥n qu√† kh√¥ng ch·ªâ l√† s·∫£n ph·∫©m, m√† l√† l·ªùi ch√∫c l√†nh ‚Äì s·ª± g·∫Øn k·∫øt thi√™ng li√™ng gi·ªØa c√°c th·∫ø h·ªá.<br />
                  Ch√∫ng t√¥i mang ƒë·∫øn nh·ªØng <em>m√¢m l·ªÖ t∆∞∆°m t·∫•t</em>, <em>qu√† bi·∫øu tinh t·∫ø</em> ‚Äì k·∫øt h·ª£p h√†i h√≤a gi·ªØa gi√° tr·ªã truy·ªÅn th·ªëng v√† chu·∫©n m·ª±c hi·ªán ƒë·∫°i.<br />
                  H∆°n c·∫£ m·ªôt th∆∞∆°ng hi·ªáu, DoleSaigon s·∫Ω l√† ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh trong m·ªçi kho·∫£nh kh·∫Øc sum v·∫ßy.
                </p>
              </div>
              <h2 className="products-title">T·∫•t c·∫£ s·∫£n ph·∫©m</h2>
            </>
        )}

        {/* Main category tabs (only at /products) */}
        {isAllPage && CategoryData && (
            <div className="tabs main-tabs">
              <button
                  className={!selectedCategory ? "active" : ""}
                  onClick={() => setSelectedCategory("")}
              >
                <span className="inner-border">T·∫•t c·∫£</span>
              </button>
              {mainCategories.map((cat) => (
                  <button
                      key={cat}
                      className={cat === selectedCategory ? "active" : ""}
                      onClick={() => setSelectedCategory(cat)}
                  >
                    <span className="inner-border">{cat}</span>
                  </button>
              ))}
            </div>
        )}

        {/* Sub-category tabs */}
        {!isAllPage && CategoryData && subCategoryMap[categorySlug] ? (
            // For category pages with CategoryData
            <div className="tabs sub-tabs">
              {subCategoryMap[categorySlug].map((sub) => (
                  <button
                      key={sub}
                      className={`subcategory-tab ${sub === selectedSub ? "active" : ""}`}
                      onClick={() =>
                          navigate(`/category/${categorySlug}?sub=${encodeURIComponent(sub)}`)
                      }
                  >
                    <span className="inner-border">{sub}</span>
                  </button>
              ))}
            </div>
        ) : (
            // Fallback tabs for when CategoryData is not available
            <div className="tabs">
              {subCategories.map(cat => (
                  <button
                      key={cat}
                      className={cat === selectedSub ? 'active' : ''}
                      onClick={() => {
                        if (isAllPage) {
                          // For /products page, use state
                          setSelectedCategory(cat);
                        } else {
                          // For category pages, use URL query
                          navigate(`/category/${categorySlug}?sub=${encodeURIComponent(cat)}`);
                        }
                      }}
                  >
                    <span className="inner-border">{cat}</span>
                  </button>
              ))}
            </div>
        )}

        {/* Sorting Options */}
        <div className="sort-options">
          <span className="sort-label">X·∫øp theo</span>
          {[
            { value: "default", label: "M·∫∑c ƒë·ªãnh" },
            { value: "name-asc", label: "T√™n A-Z" },
            { value: "name-desc", label: "T√™n Z-A" },
            { value: "newest", label: "H√†ng m·ªõi" },
            { value: "price-asc", label: "Gi√° th·∫•p ƒë·∫øn cao" },
            { value: "price-desc", label: "Gi√° cao xu·ªëng th·∫•p" },
          ].map((option) => (
              <button
                  key={option.value}
                  onClick={() => setSortOption(option.value)}
                  className={`sort-button ${sortOption === option.value ? 'active' : ''}`}
              >
                <span className="diamond">‚óÜ</span>
                {option.label}
              </button>
          ))}
        </div>

        {/* Product List */}
        {sorted.length === 0 ? (
            <p className="no-products">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.</p>
        ) : (
            <div className="product-grid">
              {currentItems.map(item => (
                  <div key={item.id} className="promo-item-products">
                    <Link to={`/product/${item.id}`}>
                      <ProductImage
                          productId={item.id}
                          alt={item.productName}
                          cacheKey={item.lastUpdated}
                      />
                      <span className="discount-tag">-{Math.round(10)}%</span>
                    </Link>

                    <div className="price-box-products">
                      <Link to={`/product/${item.id}`}>
                        <h4>{item.productName}</h4>
                        <span className="old-price-products">{(item.price * 1.1).toLocaleString()}ƒë</span>
                        <span className="new-price-products">{item.price.toLocaleString()}ƒë</span>
                      </Link>
                      <div className="action-buttons-homepage">
                        <AddToCartButton product={item} quantity={1} />
                        <button
                            className="heart-btn"
                            onClick={() => toggleFavorite(item)}
                            title={item.isFavorite ? "B·ªè kh·ªèi y√™u th√≠ch" : "Th√™m v√†o y√™u th√≠ch"}
                        >
                          <FaHeart className={`heart-icon ${item.isFavorite ? 'red' : ''}`} />
                        </button>
                      </div>
                    </div>
                  </div>
              ))}
            </div>
        )}

        {/* Pagination */}
        <div className="pagination">
          {Array.from({ length: Math.ceil(sorted.length / itemsPerPage) }, (_, i) => (
              <button
                  key={i + 1}
                  onClick={() => setCurrentPage(i + 1)}
                  className={currentPage === i + 1 ? 'active' : ''}
              >
                {i + 1}
              </button>
          ))}
        </div>
      </div>
  );
};

export default ProductsPage;